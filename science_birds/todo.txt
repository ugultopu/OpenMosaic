- There is a lot of code duplication for level generator functions. Condense
them.
- Convert the ALL_CAPS names to snake_case names.
- Check if you can edit/condense, etc. the LEVEL_TEMPLATE in
'science_birds_constants'.

DONE
----
- Right now, the "point" for the platforms (that is, the tile that we take as
reference of the beginning of the platform) is top-left. However, in order to
make it consistent with the matrix (that is, list of lists) that contain the
tiles of the mosaic, making it bottom-left and make it extend towards above and
right makes more sense.
- If a platform extends too above, such that it goes over the ceiling of the
structure, simply insert the required blocks to complete the platform.
- To fix the instability problem, your best bet seems to be to hold a variable
to remember the X distance from the origin as well. Implement this.
- Shorten the highly explicit variable names and instead add a comment to the
place that they have been defined in order to describe their purpose.
- Convert "science_birds_level_constructor" to a Python class.
- You use "tile" and "block" to refer to the same thing. Unify these.
- Put the block information (name, width, height, etc.) into a Python dictionary
and refer to the dictionary in various parts of the code.
- Create a class named "Block" and create instances of it for different block
types, so that e.g., getting width of a block is more straightforward.
- Put strings (block strings, pig strings, level template, etc.) to a separate
file and import strings from that file.
- Complete putting platforms regularly instead of randomly.
- Create a config file and read config parameters such as principal block,
structure block, etc. from that file.
- Make the output write directly to Science Birds level directory, so that you
won't need to do any copy-pasting at all after program run. You will be able to
just start the level and test it.
- There is a lot of code duplication for "divmod" invocation and the ternary
operator that comes after it. Put that in a function and call that function.
- Convert the appropriate methods to class methods ("static methods" in Java
 terms).
